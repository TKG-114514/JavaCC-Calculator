/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.io.*;
import java.awt.event.*;
import java.math.BigDecimal;
class Parser implements ParserConstants {
        private ActionListener listener;
        public void setActionListener(ActionListener a){
                listener = a;
        }
        private void outputCalculate(Node n){
          if((n.calculate() - (int)n.calculate()) == 0) {
                        listener.actionPerformed(
                        new ActionEvent(this,
                                        ActionEvent.ACTION_PERFORMED,
                                        String.valueOf(n.Icalculate())));
                }
                else {
                        listener.actionPerformed(
                        new ActionEvent(this,
                                        ActionEvent.ACTION_PERFORMED,
                                        String.valueOf(n.calculate())));
                }

        }
        private void outputNode(Node n){
                listener.actionPerformed(
                new ActionEvent(this,
                                ActionEvent.ACTION_PERFORMED,
                                n.displayValue()));
        }

  final public Node start() throws ParseException {
        Node root;
    root = first();
    jj_consume_token(EQOP);
                outputCalculate(root); {if (true) return root;}
    throw new Error("Missing return statement in function");
  }

  final public Node first() throws ParseException {
        Node root, node;
    root = sum();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REMAINOP:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(REMAINOP);
      node = prod();
                root = Op.connectToLeft(root);
                root.setOp('%');
                root.addRight(node);
                outputNode(root);
    }
            {if (true) return root;}
    throw new Error("Missing return statement in function");
  }

  final public Node sum() throws ParseException {
        Node root, node;
    root = prod();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUSOP:
      case MINUSOP:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUSOP:
        jj_consume_token(PLUSOP);
        node = prod();
                root = Op.connectToLeft(root);
                root.setOp('+');
                root.addRight(node);
                outputNode(root);
        break;
      case MINUSOP:
        jj_consume_token(MINUSOP);
        node = prod();
                root = Op.connectToLeft(root);
                root.setOp('-');
                root.addRight(node);
                outputNode(root);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
            {if (true) return root;}
    throw new Error("Missing return statement in function");
  }

  final private Node prod() throws ParseException {
        Node node, root;
    root = value();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULOP:
      case DIVOP:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULOP:
        jj_consume_token(MULOP);
        node = value();
                root = Op.connectToLeft(root);
                root.setOp('*');
                root.addRight(node);
                outputNode(root);
        break;
      case DIVOP:
        jj_consume_token(DIVOP);
        node = value();
                root = Op.connectToLeft(root);
                root.setOp('/');
                root.addRight(node);
                outputNode(root);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
            {if (true) return root;}
    throw new Error("Missing return statement in function");
  }

  final private Node value() throws ParseException {
        Node node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      node = num();
                    outputNode(node); {if (true) return node;}
      break;
    case OPEN:
      jj_consume_token(OPEN);
      node = sum();
      jj_consume_token(CLOSE);
                                     {if (true) return node;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Node num() throws ParseException {
        Token token;
    token = jj_consume_token(NUM);
                      {if (true) return new Num(Double.parseDouble(token.image));}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0xc,0xc,0x30,0x30,0x82,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[13];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 13; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
